//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCF_HOST.TodoService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TodoService.ITodoService")]
    public interface ITodoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/ListAll", ReplyAction="http://tempuri.org/ITodoService/ListAllResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SOP_WCF.LoginFailedFault), Action="http://tempuri.org/ITodoService/ListAllUserNotFoundFaultFault", Name="UserNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/SOP_WCF")]
        [System.ServiceModel.FaultContractAttribute(typeof(SOP_WCF.TodoNotFoundFault), Action="http://tempuri.org/ITodoService/ListAllTodoNotFoundFaultFault", Name="TodoNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/SOP_WCF")]
        SOP_WCF.TodoModel[] ListAll(SOP_WCF.UserClient client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/ListAll", ReplyAction="http://tempuri.org/ITodoService/ListAllResponse")]
        System.Threading.Tasks.Task<SOP_WCF.TodoModel[]> ListAllAsync(SOP_WCF.UserClient client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/ListById", ReplyAction="http://tempuri.org/ITodoService/ListByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SOP_WCF.LoginFailedFault), Action="http://tempuri.org/ITodoService/ListByIdUserNotFoundFaultFault", Name="UserNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/SOP_WCF")]
        [System.ServiceModel.FaultContractAttribute(typeof(SOP_WCF.TodoNotFoundFault), Action="http://tempuri.org/ITodoService/ListByIdTodoNotFoundFaultFault", Name="TodoNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/SOP_WCF")]
        SOP_WCF.TodoModel[] ListById(string id, SOP_WCF.UserClient client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/ListById", ReplyAction="http://tempuri.org/ITodoService/ListByIdResponse")]
        System.Threading.Tasks.Task<SOP_WCF.TodoModel[]> ListByIdAsync(string id, SOP_WCF.UserClient client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/Insert", ReplyAction="http://tempuri.org/ITodoService/InsertResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SOP_WCF.LoginFailedFault), Action="http://tempuri.org/ITodoService/InsertUserNotFoundFaultFault", Name="UserNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/SOP_WCF")]
        void Insert(string title, string body, string author, string deadline, string priority, SOP_WCF.UserClient client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/Insert", ReplyAction="http://tempuri.org/ITodoService/InsertResponse")]
        System.Threading.Tasks.Task InsertAsync(string title, string body, string author, string deadline, string priority, SOP_WCF.UserClient client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/Update", ReplyAction="http://tempuri.org/ITodoService/UpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SOP_WCF.LoginFailedFault), Action="http://tempuri.org/ITodoService/UpdateUserNotFoundFaultFault", Name="UserNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/SOP_WCF")]
        [System.ServiceModel.FaultContractAttribute(typeof(SOP_WCF.TodoNotFoundFault), Action="http://tempuri.org/ITodoService/UpdateTodoNotFoundFaultFault", Name="TodoNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/SOP_WCF")]
        void Update(int id, string title, string body, string author, string deadline, string priority, SOP_WCF.UserClient client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/Update", ReplyAction="http://tempuri.org/ITodoService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(int id, string title, string body, string author, string deadline, string priority, SOP_WCF.UserClient client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/Delete", ReplyAction="http://tempuri.org/ITodoService/DeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SOP_WCF.LoginFailedFault), Action="http://tempuri.org/ITodoService/DeleteUserNotFoundFaultFault", Name="UserNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/SOP_WCF")]
        [System.ServiceModel.FaultContractAttribute(typeof(SOP_WCF.TodoNotFoundFault), Action="http://tempuri.org/ITodoService/DeleteTodoNotFoundFaultFault", Name="TodoNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/SOP_WCF")]
        void Delete(int id, SOP_WCF.UserClient client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/Delete", ReplyAction="http://tempuri.org/ITodoService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int id, SOP_WCF.UserClient client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/Login", ReplyAction="http://tempuri.org/ITodoService/LoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SOP_WCF.LoginFailedFault), Action="http://tempuri.org/ITodoService/LoginUserNotFoundFaultFault", Name="UserNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/SOP_WCF")]
        [System.ServiceModel.FaultContractAttribute(typeof(SOP_WCF.IncorrectPasswordFault), Action="http://tempuri.org/ITodoService/LoginIncorrectPasswordFaultFault", Name="IncorrectPasswordFault", Namespace="http://schemas.datacontract.org/2004/07/SOP_WCF")]
        SOP_WCF.UserClient Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/Login", ReplyAction="http://tempuri.org/ITodoService/LoginResponse")]
        System.Threading.Tasks.Task<SOP_WCF.UserClient> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/Logout", ReplyAction="http://tempuri.org/ITodoService/LogoutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SOP_WCF.LoginFailedFault), Action="http://tempuri.org/ITodoService/LogoutUserNotFoundFaultFault", Name="UserNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/SOP_WCF")]
        void Logout(SOP_WCF.UserClient client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/Logout", ReplyAction="http://tempuri.org/ITodoService/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync(SOP_WCF.UserClient client);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITodoServiceChannel : WCF_HOST.TodoService.ITodoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TodoServiceClient : System.ServiceModel.ClientBase<WCF_HOST.TodoService.ITodoService>, WCF_HOST.TodoService.ITodoService {
        
        public TodoServiceClient() {
        }
        
        public TodoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TodoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TodoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TodoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SOP_WCF.TodoModel[] ListAll(SOP_WCF.UserClient client) {
            return base.Channel.ListAll(client);
        }
        
        public System.Threading.Tasks.Task<SOP_WCF.TodoModel[]> ListAllAsync(SOP_WCF.UserClient client) {
            return base.Channel.ListAllAsync(client);
        }
        
        public SOP_WCF.TodoModel[] ListById(string id, SOP_WCF.UserClient client) {
            return base.Channel.ListById(id, client);
        }
        
        public System.Threading.Tasks.Task<SOP_WCF.TodoModel[]> ListByIdAsync(string id, SOP_WCF.UserClient client) {
            return base.Channel.ListByIdAsync(id, client);
        }
        
        public void Insert(string title, string body, string author, string deadline, string priority, SOP_WCF.UserClient client) {
            base.Channel.Insert(title, body, author, deadline, priority, client);
        }
        
        public System.Threading.Tasks.Task InsertAsync(string title, string body, string author, string deadline, string priority, SOP_WCF.UserClient client) {
            return base.Channel.InsertAsync(title, body, author, deadline, priority, client);
        }
        
        public void Update(int id, string title, string body, string author, string deadline, string priority, SOP_WCF.UserClient client) {
            base.Channel.Update(id, title, body, author, deadline, priority, client);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(int id, string title, string body, string author, string deadline, string priority, SOP_WCF.UserClient client) {
            return base.Channel.UpdateAsync(id, title, body, author, deadline, priority, client);
        }
        
        public void Delete(int id, SOP_WCF.UserClient client) {
            base.Channel.Delete(id, client);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int id, SOP_WCF.UserClient client) {
            return base.Channel.DeleteAsync(id, client);
        }
        
        public SOP_WCF.UserClient Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<SOP_WCF.UserClient> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public void Logout(SOP_WCF.UserClient client) {
            base.Channel.Logout(client);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(SOP_WCF.UserClient client) {
            return base.Channel.LogoutAsync(client);
        }
    }
}
